
https://www.programiz.com/python-programming/statement-indentation-comments


-Comments:  # on each line for both single and multi-line.  Or use multiline string with triple quotes.
-Print:  print
-New lines are a new statement.  Semicolon is optional and not wanted.
-Instead of {}, indentations are used to represent a block.
-case-sensitive

Keywords in Python programming language
False	class	finally	is	return
None	continue	for	lambda	try
True	def	from	nonlocal	while
and	del	global	not	with
as	elif	if	or	yield
assert	else	import	pass	 
break	except	in	raise	

multi-line statement

a = 1 + 2 + 3 + \
    4 + 5 + 6 + \
    7 + 8 + 9

or use (), [], {} for “implicit”

a = (1 + 2 + 3 +
    4 + 5 + 6 +
    7 + 8 + 9)

-multiple-statements in a line

a = 1; b = 2; c = 3


A code block (body of a function, loop etc.) starts with indentation and ends with the first unindented line. The amount of indentation is up to you, but it must be consistent throughout that block.

Generally four whitespaces are used for indentation and is preferred over tabs. Here is an example.

for i in range(1,11):
    print(i)
    if i == 5:
        break

-Multi-line strings ''' or """

-docstring a triple quote string that documents

def double(num):
    """Function to double the value"""
    return 2*num

print(double.__doc__)


-Data Types

Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.

int (any length - no wrapping)
float (1.0 - up to 15 places)
complex (x +yj, x is the real part and y is the imaginary)

We can use the type() function to know which class a variable or a value belongs to and the isinstance() function to check if an object belongs to a particular class.

a = 5
print(a, "is of type", type(a))

a = 2.0
print(a, "is of type", type(a))

a = 1+2j
print(a, "is complex number?", isinstance(1+2j,complex))


-LIST

a = [5,10,15,20,25,30,35,40]

# a[2] = 15
print("a[2] = ", a[2])

# a[0:3] = [5, 10, 15]
print("a[0:3] = ", a[0:3])

# a[5:] = [30, 35, 40]
print("a[5:] = ", a[5:])

-TUPLE

Ordered sequence of items same as list.  Tuples are immutable though.
Uses ()

t = (5,'program', 1+3j)

# t[1] = 'program'
print("t[1] = ", t[1])

# t[0:3] = (5, 'program', (1+3j))
print("t[0:3] = ", t[0:3])

# Generates error
# Tuples are immutable
t[0] = 10

-STRINGS

String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, ''' or """.

s = 'Hello world!'

# s[4] = 'o'
print("s[4] = ", s[4])

# s[6:11] = 'world'
print("s[6:11] = ", s[6:11])

# Generates error
# Strings are immutable in Python
s[5] ='d'

String are immutable

-SET

Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces { }. Items in a set are not ordered.

a = {5,2,3,1,4}

# printing set variable
print("a = ", a)

# data type of variable a
print(type(a))

Unordered so slice [] does not work

-Dictionary

Unordered collection of key-value pairs.

It is generally used when we have a huge amount of data. Dictionaries are optimized for retrieving data. We must know the key to retrieve the value.

In Python, dictionaries are defined within braces {} with each item being a pair in the form key:value. Key and value can be of any type.


>>> d = {1:'value','key':2}
>>> type(d)
<class 'dict'>

d = {1:'value','key':2}
print(type(d))

print("d[1] = ", d[1]);

print("d['key'] = ", d['key']);

# Generates error
print("d[2] = ", d[2]);

-Convert

We can convert between different data types by using different type conversion functions like int(), float(), str() etc.











Python Input, Output, and Import

print('I love {0} and {1}'.format('bread','butter'))


input([prompt])


import math

from math import pi





Python Operators

Arith
// Floor division - division that results into whole number adjusted to the left in the number line	x // y

**	Exponent - left operand raised to the power of right	x**y (x to the power y)

Comp return True or False

== Equal To !=

Logical

and
or
not











